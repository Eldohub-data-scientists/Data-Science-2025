# -*- coding: utf-8 -*-
"""assignment_10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SbtfOcI_Zh3VhcFmRMXtVxjQ_byv8x8B
"""

# ============================================
# Understanding list references vs. reassignment
# ============================================

# Initial list
planets_list1 = ['Mercury']
# planets_list2 points to the same object in memory
planets_list2 = planets_list1

# Reassign planets_list1 to a new list
planets_list1 = ['Venus']

# planets_list2 is unchanged because it still references the original list
print(planets_list2)  # Output: ['Mercury']


# ============================================
# Functions for processing student names
# ============================================

def clean_names(names):
    """
    Remove duplicate names and return an alphabetically sorted list.

    Args:
        names (list): List of names (possibly with duplicates).

    Returns:
        list: Alphabetically sorted list of unique names (case-insensitive).
    """
    # Convert to set to remove duplicates, then back to list
    unique_names = list(set(names))
    # Sort alphabetically ignoring case
    unique_names.sort(key=lambda x: x.lower())
    return unique_names


def clean_names_preserve_order(names):
    """
    Remove duplicates while preserving the first occurrence of each name,
    then sort alphabetically (case-insensitive).

    Args:
        names (list): List of names (possibly with duplicates).

    Returns:
        list: Alphabetically sorted list of unique names.
    """
    seen = set()
    unique_names = []
    for name in names:
        if name not in seen:
            seen.add(name)
            unique_names.append(name)

    unique_names.sort(key=lambda x: x.lower())
    return unique_names


# ============================================
# Test functions with sample data
# ============================================

def test_name_functions():
    """Test name-cleaning functions with sample data."""

    # New dataset with duplicates and mixed cases
    students = ['Liam', 'Olivia', 'Noah', 'Emma', 'Liam',
                'Ava', 'Sophia', 'noah', 'Isabella', 'Emma']

    print("Original student list:")
    print(students)
    print(f"Total count: {len(students)}\n")

    # Method 1: using set()
    result1 = clean_names(students)
    print("Method 1 - Remove duplicates with set(), then sort:")
    print(result1)
    print(f"Unique count: {len(result1)}\n")

    # Method 2: preserving first occurrence order
    result2 = clean_names_preserve_order(students)
    print("Method 2 - Remove duplicates preserving order, then sort:")
    print(result2)
    print(f"Unique count: {len(result2)}\n")

    # Show case-sensitive default sort
    case_sensitive_sort = list(set(students))
    case_sensitive_sort.sort()
    print("Case-sensitive sort (default behavior):")
    print(case_sensitive_sort)
    print("Note: 'Noah' and 'noah' appear separately due to case.\n")


# ============================================
# Practice exercise with another dataset
# ============================================

def practice_exercise():
    """Practice exercise using another dataset of names."""

    names = [
        'Ethan', 'Mia', 'Ethan',    # duplicate
        'Lucas', 'mia',             # duplicate but different case
        'Amelia', 'James',
        'Harper', 'Benjamin', 'Mia' # duplicate
    ]

    print("Practice Exercise:")
    print("=" * 40)
    print(f"Original names: {names}")
    print(f"Original count: {len(names)}\n")

    unique_sorted = clean_names(names)
    print(f"After removing duplicates and sorting: {unique_sorted}")
    print(f"Unique count: {len(unique_sorted)}\n")

    # Show duplicates and their counts
    from collections import Counter
    counts = Counter(names)
    duplicates = {name: cnt for name, cnt in counts.items() if cnt > 1}

    if duplicates:
        print("Duplicates removed:")
        for name, cnt in duplicates.items():
            print(f"  {name}: {cnt} occurrences")
    else:
        print("No duplicates found.")


# ============================================
# Run the program
# ============================================
if __name__ == "__main__":
    # Part 1: Reference behavior
    print("Understanding List References:")
    print("=" * 40)
    planets_list1 = ['Earth']
    planets_list2 = planets_list1
    print(f"Before reassignment: list1 = {planets_list1}, list2 = {planets_list2}")
    planets_list1 = ['Mars']
    print(f"After reassignment: list1 = {planets_list1}, list2 = {planets_list2}")
    print("list2 still points to the original list!\n")

    # Part 2: Test the functions
    test_name_functions()

    # Part 3: Run practice exercise
    practice_exercise()

